version: "3.7"
services:
    recursor:
        image: mvance/unbound:1.13.2
        container_name: pektin-recursor
        restart: always
        volumes:
            - ../config/unbound/unbound.conf:/opt/unbound/etc/unbound/unbound.conf:ro
        networks:
            - rp
        labels:
            traefik.enable: "true"
            traefik.docker.network: rp
            traefik.http.routers.pektin-recursor.tls.certresolver: "default"
            traefik.http.routers.pektin-recursor.tls.domains[0].main: "${DOMAIN}"
            traefik.http.routers.pektin-recursor.tls.domains[0].sans: "*.${DOMAIN}"
            traefik.http.routers.pektin-recursor.rule: "Host(`${RECURSOR_SUBDOMAIN}.${DOMAIN}`)"
            traefik.http.routers.pektin-recursor.tls: "true"
            traefik.http.routers.pektin-recursor.entrypoints: "websecure"
            traefik.http.services.pektin-recursor.loadbalancer.server.port: "80"
            traefik.http.services.pektin-recursor.loadbalancer.server.scheme: "h2c"
            traefik.http.routers.pektin-recursor.middlewares: pektin-recursor-chained@docker

            # chain both middlewares
            traefik.http.middlewares.pektin-recursor-chained.chain.middlewares: pektin-recursor-cors@docker,pektin-recursor-auth@docker
            # enable cors
            traefik.http.middlewares.pektin-recursor-cors.headers.accesscontrolallowmethods: GET,OPTIONS,POST
            traefik.http.middlewares.pektin-recursor-cors.headers.accesscontrolalloworiginlist: "*"
            traefik.http.middlewares.pektin-recursor-cors.headers.accesscontrolallowheaders: authorization,content-type
            # add auth
            traefik.http.middlewares.pektin-recursor-auth.basicauth.users: ${RECURSOR_AUTH}

networks:
    rp:
        name: rp
